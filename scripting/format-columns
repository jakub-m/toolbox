#!/usr/bin/env python3


import argparse
import sys


def main():
    opts = get_options()
    in_sep = opts.input_sep
    out_sep = opts.output_sep
    col_width_cap = max(opts.max_col_width, 0)
    elypsis = '...' if opts.elypsis else ''
    rows = []
    for i, line in enumerate(sys.stdin):
        line = line.rstrip("\n")
        parts = line.split(in_sep)
        if col_width_cap:
            parts = [cap_width(p, col_width_cap, elypsis) for p in parts]
        if rows:
            prev_width = len(rows[-1])
            this_width = len(parts)
            if prev_width != this_width:
                fatal(f"Line {i+1}: previous row had {prev_width} and this row has {this_width}. Expected rows of equal width. Current row:\n{line}")
        rows.append(parts)
    col_max_widths = get_max_widths_from_rows(rows)
    for row in rows:
        out_line = out_sep.join(pad(col, w) for w, col in zip(col_max_widths, row))
        print(out_line)


def get_max_widths_from_rows(rows):
    widths_d = {}
    for row in rows:
        for i, col in enumerate(row):
            w = len(col)
            curr_w = widths_d.setdefault(i, 0)
            widths_d[i] = max(w, curr_w)
    return [widths_d[i] for i in range(len(widths_d))]


def pad(s, width):
    return s + ' ' * max(0, width - len(s))


def cap_width(s, width, elypsis=''):
    t = s[:min(len(s), width)]
    return t if (len(t) == len(s)) else (t + elypsis)


def get_options():
    p = argparse.ArgumentParser(description="format input TSV as pretty columns")
    p.add_argument('-is', '--input-sep', type=str, default="\t", help='input separator')
    p.add_argument('-os', '--output-sep', type=str, default=" | ", help='output separator')
    p.add_argument('-cw', '--max-col-width', type=int, default=0, help='cap single column to this width. 0 (default) means that there is no limit')
    p.add_argument('-el', '--elypsis', action='store_true', default=False, help='add elypsis when capped')
    return p.parse_args()


def fatal(message):
    if message:
        print(message)
    sys.exit(1)


main()
